#!/bin/bash

. ./test/helper.sh

log() {
	if [[ -t 1 ]]; then
		echo -e "\x1b[1m\x1b[32m>>>\x1b[0m \x1b[1m\x1b[37m$1\x1b[0m"
	else
		echo ">>> $1"
	fi
}

error() {
	if [[ -t 1 ]]; then
		echo -e "\x1b[1m\x1b[31m!!!\x1b[0m \x1b[1m\x1b[37m$1\x1b[0m" >&2
	else
		echo "!!! $1" >&2
	fi
}

fail() {
	error "$1"
	exit -1
}

download() {
	if [[ $(type -t wget) ]]; then
		wget -c -O "$2" "$1"
	elif [[ $(type -t curl) ]]; then
		curl -L -C - -o "$2" "$1"
	else
		error "Could not find wget or curl"
		return 1
	fi
}

detect_system() {
  SYSTEM_TYPE="unknown"
  SYSTEM_NAME="unknown"
  SYSTEM_VERSION="unknown"
  SYSTEM_ARCH="$(uname -m)"

  case "$(uname)" in
    (Linux|GNU*)
      SYSTEM_TYPE="linux"

      if [[ -f /etc/lsb-release ]] &&
	 [[ "$(cat /etc/lsb-release)" == *"DISTRIB_ID=Ubuntu"* ]]
      then
        SYSTEM_NAME="ubuntu"
        SYSTEM_VERSION="$(awk -F'=' '$1=="DISTRIB_RELEASE"{print $2}' /etc/lsb-release)"
        SYSTEM_ARCH="$(dpkg --print-architecture)"
      elif [[ -f /etc/lsb-release ]] &&
           [[ "$(cat /etc/lsb-release)" == *"DISTRIB_ID=LinuxMint"* ]]
      then
        SYSTEM_NAME="mint"
        SYSTEM_VERSION="$(awk -F'=' '$1=="DISTRIB_RELEASE"{print $2}' /etc/lsb-release)"
        SYSTEM_ARCH="$( dpkg --print-architecture )"
      elif [[ -f /etc/lsb-release ]] &&
           [[ "$(cat /etc/lsb-release)" == *"DISTRIB_ID=ManjaroLinux"* ]]
      then
        SYSTEM_NAME="manjaro"
        SYSTEM_VERSION="$(awk -F'=' '$1=="DISTRIB_RELEASE"{print $2}' /etc/lsb-release)"
      elif [[ -f /etc/os-release ]] &&
           [[ "$(cat /etc/os-release)" == *"ID=opensuse"* ]]
      then
        SYSTEM_NAME="opensuse"
        SYSTEM_VERSION="$(awk -F'=' '$1=="VERSION_ID"{gsub(/"/,"");print $2}' /etc/os-release)" #'
      elif [[ -f /etc/SuSE-release ]]; then
        SYSTEM_NAME="suse"
        SYSTEM_VERSION="$(
          awk -F'=' '{gsub(/ /,"")} $1~/VERSION/ {version=$2} $1~/PATCHLEVEL/ {patch=$2} END {print version"."patch}' < /etc/SuSE-release
        )"
      elif [[ -f /etc/debian_version ]]; then
        SYSTEM_NAME="debian"
        SYSTEM_VERSION="$(cat /etc/debian_version | awk -F. '{print $1"."$2}')"
        SYSTEM_ARCH="$( dpkg --print-architecture )"
      elif [[ -f /etc/os-release ]] &&
           [[ "$(cat /etc/os-release)" == *"ID=debian"* ]]
      then
        SYSTEM_NAME="debian"
        SYSTEM_VERSION="$(awk -F'=' '$1=="VERSION_ID"{gsub(/"/,"");print $2}' /etc/os-release | awk -F. '{print $1"."$2}')" #'
        SYSTEM_ARCH="$( dpkg --print-architecture )"
      elif [[ -f /etc/fedora-release ]]; then
        SYSTEM_NAME="fedora"
        SYSTEM_VERSION="$(grep -Eo '[[:digit:]]+' /etc/fedora-release)"
      elif [[ -f /etc/centos-release ]]; then
        SYSTEM_NAME="centos"
        SYSTEM_VERSION="$(grep -Eo '[[:digit:]\.]+' /etc/centos-release | awk -F. '{print $1"."$2}')"
      elif [[ -f /etc/redhat-release ]]; then
        if [[ "$(cat /etc/redhat-release)" == *"CentOS"* ]]; then
		SYSTEM_NAME="centos"
        else
		SYSTEM_NAME="redhat"
        fi

        SYSTEM_VERSION="$(grep -Eo '[[:digit:]\.]+' /etc/redhat-release | awk -F. '{print $1"."$2}')"
      elif [[ -f /etc/system-release ]] &&
           [[ "$(cat /etc/system-release)" == *"Amazon Linux AMI"* ]]
      then
        SYSTEM_NAME="amazon"
        SYSTEM_VERSION="$(grep -Eo '[[:digit:]\.]+' /etc/system-release | awk -F. '{print $1"."$2}')"
      elif [[ -f /etc/gentoo-release ]]; then
        SYSTEM_NAME="gentoo"
        SYSTEM_VERSION="base-$(cat /etc/gentoo-release | awk 'NR==1 {print $NF}' | awk -F. '{print $1"."$2}')"
      elif [[ -f /etc/arch-release ]]; then
        SYSTEM_NAME="arch"
        SYSTEM_VERSION="libc-$(ldd --version | awk 'NR==1 {print $NF}' | awk -F. '{print $1"."$2}')"
      else
        SYSTEM_VERSION="libc-$(ldd --version | awk 'NR==1 {print $NF}' | awk -F. '{print $1"."$2}')"
      fi
      ;;

    (SunOS)
      SYSTEM_TYPE="sunos"
      SYSTEM_NAME="solaris"
      SYSTEM_VERSION="$(uname -v)"

      if [[ "${SYSTEM_VERSION}" == joyent* ]]; then
        SYSTEM_NAME="smartos"
        SYSTEM_VERSION="${SYSTEM_VERSION#* }"
      elif [[ "${SYSTEM_VERSION}" == oi* ]]; then
        SYSTEM_NAME="openindiana"
        SYSTEM_VERSION="${SYSTEM_VERSION#* }"
      fi
      ;;

    (OpenBSD)
      SYSTEM_TYPE="bsd"
      SYSTEM_NAME="openbsd"
      SYSTEM_VERSION="$(uname -r)"
      ;;

    (Darwin)
      SYSTEM_TYPE="darwin"
      SYSTEM_NAME="osx"
      SYSTEM_VERSION="$(sw_vers -productVersion)"
      SYSTEM_VERSION="${SYSTEM_VERSION%.*}" # only major.minor - teeny is ignored
      ;;

    (FreeBSD)
      SYSTEM_TYPE="bsd"
      SYSTEM_NAME="freebsd"
      SYSTEM_VERSION="$(uname -r)"
      SYSTEM_VERSION="${SYSTEM_VERSION%%-*}"
      ;;

    (*)
      return 1
      ;;
  esac

  SYSTEM_TYPE="${SYSTEM_TYPE//[ \/]/_}"
  SYSTEM_NAME="${SYSTEM_NAME//[ \/]/_}"
  SYSTEM_VERSION="${SYSTEM_VERSION//[ \/]/_}"
  SYSTEM_ARCH="${SYSTEM_ARCH//[ \/]/_}"
  SYSTEM_ARCH="${SYSTEM_ARCH/amd64/x86_64}"
  SYSTEM_ARCH="${SYSTEM_ARCH/i[123456789]86/i386}"
}

detect_system || fail "Cannot auto-detect system type"
[[ "$SYSTEM_NAME" == "unknown"    ]] && fail "Could not detect system name"
[[ "$SYSTEM_VERSION" == "unknown" ]] && fail "Could not detect system version"
[[ "$SYSTEM_ARCH" == "unknown"    ]] && fail "Could not detect system arch"

TEST_RUBY_ARCHIVE="$test_ruby_engine-$test_ruby_version-p$test_ruby_patchlevel.tar.bz2"
TEST_RUBY_URL="http://rvm.io/binaries/$SYSTEM_NAME/$SYSTEM_VERSION/$SYSTEM_ARCH/$test_ruby_archive"
tEST_RUBY_ROOT="$test_ruby_engine-$test_ruby_version-p$test_ruby_patchlevel"

mkdir -p test/rubies
cd test/rubies

log "Downloading $test_ruby_url ..."
download "$test_ruby_url" "$test_ruby_archive" || fail "Download failed"

log "Unpacking $test_ruby_archive ..."
tar -xjf "$test_ruby_archive" || fail "Unpacking failed"
